{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is this? The Humanities Data Coursebook is a set of open modules for teaching skills and methods for working with humanities-based data. Each section contains a text-based lecture, hands-on activities, assignment and assessment ideas, and further reading and resources. This coursebook grew out of a specific course, DCI 102: Data in the Humanities, taught within a minor in Digital Culture and Information at Washington and Lee University. Who is this for? The coursebook is designed for an undergraduate audience new to working with digital methods. While a background in the humanities is helpful, it is not a prerequisite. This coursebook contains methods that can be applied to a range of disciplines. The modules can be used for self-study, or taken and adapted by any instructor. What are the learning goals? Recognize and assess data-driven digital projects. Integrate research goals and digital methods with discipline-specific inquiry. Develop skills necessary to create, structure, clean, manipulate, and visualize data. Engage in collaborative, interdisciplinary, project-based learning. Create professional website to document and present unit assignments. How to use This coursebook is written in Markdown, so it can be easily adapted to a variety of other publishing platforms. Markdown is a basic syntax for writing for the Web, so the basic structure can be transformed into other formats. Specifically, this site uses a a static site generator called MKDocs along with GitHub pages. You can find the repository of Markdown files on GitHub. Who made this? This coursebook was made by Mackenzie Brooks , Associate Professor and Digital Humanities Librarian at Washington and Lee University. License Acknowledgments This coursebook was inspired by the Text Analysis Coursebook created by Brandon Walsh and Sarah Horowitz . Both should be acknowledged beyond the coursebook for their generous and ongoing conversations about pedagogy and Digital Humanities. Manatee icon credit: Freepik from www.flaticon.com .","title":"Humanities Data Coursebook"},{"location":"#what-is-this","text":"The Humanities Data Coursebook is a set of open modules for teaching skills and methods for working with humanities-based data. Each section contains a text-based lecture, hands-on activities, assignment and assessment ideas, and further reading and resources. This coursebook grew out of a specific course, DCI 102: Data in the Humanities, taught within a minor in Digital Culture and Information at Washington and Lee University.","title":"What is this?"},{"location":"#who-is-this-for","text":"The coursebook is designed for an undergraduate audience new to working with digital methods. While a background in the humanities is helpful, it is not a prerequisite. This coursebook contains methods that can be applied to a range of disciplines. The modules can be used for self-study, or taken and adapted by any instructor.","title":"Who is this for?"},{"location":"#what-are-the-learning-goals","text":"Recognize and assess data-driven digital projects. Integrate research goals and digital methods with discipline-specific inquiry. Develop skills necessary to create, structure, clean, manipulate, and visualize data. Engage in collaborative, interdisciplinary, project-based learning. Create professional website to document and present unit assignments.","title":"What are the learning goals?"},{"location":"#how-to-use","text":"This coursebook is written in Markdown, so it can be easily adapted to a variety of other publishing platforms. Markdown is a basic syntax for writing for the Web, so the basic structure can be transformed into other formats. Specifically, this site uses a a static site generator called MKDocs along with GitHub pages. You can find the repository of Markdown files on GitHub.","title":"How to use"},{"location":"#who-made-this","text":"This coursebook was made by Mackenzie Brooks , Associate Professor and Digital Humanities Librarian at Washington and Lee University.","title":"Who made this?"},{"location":"#license","text":"","title":"License"},{"location":"#acknowledgments","text":"This coursebook was inspired by the Text Analysis Coursebook created by Brandon Walsh and Sarah Horowitz . Both should be acknowledged beyond the coursebook for their generous and ongoing conversations about pedagogy and Digital Humanities. Manatee icon credit: Freepik from www.flaticon.com .","title":"Acknowledgments"},{"location":"data/","text":"Data","title":"Data"},{"location":"data/#data","text":"","title":"Data"},{"location":"how-the-web-works/","text":"In this module, we'll explore how Internet works, learn the basics of HTML and CSS, and setup your own website on WordPress. Before we can start doing research with humanities data, we need to understand a little bit about the context of our digital world. Table of Contents: What even is the Internet? HTML Text Editors CSS Your domain Activities Activity 1: Install WordPress Activity 2: Customize WordPress Activity 3: HTML Activity 4: CSS Activity 5: Make it live Activity 6 Readings Resources What even is the Internet? The Internet is magic! Just kidding, it's not, but it can certainly seem that way. Maybe you're reading this on your phone in the middle of the lawn, or curled up in bed with your laptop. It's more than likely that you're using Wi-Fi or a cellular network and therefore have no physical connection to the Internet. It's understandable that it feels like magic sometimes! But in reality, the Internet is an immensely physical thing. Put simply, it is computers connected to other computers. The information (text or media and all forms in between) you send and receive travels through wires and fiber-optic cables in the ground and even under the ocean . These connected or \"networked\" computers talk to each other using their own languages or more precisely, specific protocols. For instance, every computer has an address, known as an IP (Internet Protocol) address, to help direct traffic to the right place. Another protocol that you use, even if you don't realize it, is the Hypertext Transfer Protocol, or HTTP. Your browser uses HTTP to render websites. When you type in http://www.wlu.edu your browser sends out a request to the computer that can serve up all the files at that particular address. The \"server\" returns the files and your browser (Safari, Chrome, Firefox) renders them into a website. At its simplest, a website is just a folder full of files and images. Those files are full of code, which we'll learn about in the next section. Make sense? Here are a few videos that might help you visualize this great network of computers: What is the Internet? The Internet: Wires, Cables, and Wi-fi HTML HTML, or Hypertext Markup Language, is one of the basic building blocks of the web. Every website you see is created using this language, from the most basic to most interactive. To prove it, go to your browser open up a new tab right now. Visit any website you like. Right click, or ctrl + click to open up an options menu. Select View Page Source . If you're using Safari, try pressing Command + Option + i . You should see a new window full of text surrounded by angle brackets. That's HTML. HTML stands for HyperText Markup Language. It is a set of tags, or elements , that adds structure to a document or page. When you write a document, you rely on style to indicate something about the text. You might put the title in a bigger font or break up paragraphs with tabs or new lines. Markup languages do this by adding tags around the content you wish to set apart. For example: <h1>This is a top level heading</h1> is HTML that tells the browser to 1) increase the size of the text, but more importantly 2) that this piece of text represents a major section of the document. Which pieces of text on this page are an <h1> ? Can you use the View Page Source trick to confirm? What are other tags that you might expect to exist? If you were to analyze a website, what are the major components? What are the familiar conventions of websites, regardless of the type? Some things that come to mind: menus or navigation <nav> , images <img src=\"kittens.jpg\"> , or even just your basic paragraph <p> . To give you a taste, a basic HTML document might look like this: <html> <head> <title>My Awesome Website</title> </head> <body> <h1>Welcome/h1> <p>This is a long paragraph about my cat.</p> </body> </html> As you can see, angle brackets surround each tag. The tags themselves around pieces of content. There's an opening tag and a closing tag. You can tell the closing tag by the slash after the angle bracket </title> . You should also notice that the tags are nested. The <head> and <body> tag are both children of <html> , and each of those tags has their own children. We'll learn more HTML down in Activity X. For now, the thing to remember is that HTML exists to tell the computer, specifically the browser, what to do with each piece of content. Another way to say this is semantic markup . Attaching structural or semantic meaning to content is especially important because not everyone (people or computers) uses their eyes to read the Web. Using valid HTML ensures that the Web is accessible to everyone, regardless of their ability. Even if you don't go on to build websites for a living, something as simple as adding a caption to any image you publish can improve accessibility. Text Editors Before we move on, there's one other important thing to understand about writing HTML. HTML documents are plain text documents. You don't write HTML in a Word doc or a Google doc, instead it's best to use a piece of software called a text editor. There are many text editors out there and it's personal preference which one you use. I like one called Sublime , but I know others use Atom or Visual Studio . Try a few out to see which one suits you. Even though the text is \"plain\", text editors have a feature called syntax highlighting , which means that the text changes color to help you write good code. When it's time to see what your markup or code can do, you'll need to open it in your browser. CSS Our next building block of the web is CSS, or Cascading Style Sheets. We just learned that HTML will add structure to your document, but you need something else to add the pretty colors and images, also known as style . A style sheet is a plain text document that lists all the styles that you want to apply to your page. The cascading part means that you can be selective about how elements appear. If you analyze this page, what styles would you guess are in play? Are there some elements that look different than other elements? Cascading style sheets allow me to indicate that I want my headings to use a different font than my body text, for instance. CSS uses a different syntax than HTML. It can be a little confusing because it relies on HTML tags, but the structure is a little different. Think about HTML as a document, and CSS as a separate list. Here's an example: body { background-color: aquamarine; font-family: Helvetica, sans-serif; } h1 { font-size: 150%; } The first step is to identify the HTML tag you wish to style. Here, we're styling everything that lives within the <body> tag. In CSS language, this is a selector. Once we identify our selector, we list, or declare the things we want to style within a pair of curly brackets. This can be called the \"declaration block.\" We identify the thing, or \"property\" we wish to style, followed by a colon, then list the \"value\" we want to use, ending with a semi-colon. In CSS terms, it looks like this: selector { property: value; otherProperty: anotherValue; } The syntax takes getting used to, but remember, you do not have to memorize every property or selector. Even experienced Web designers have to look things up. I recommend using the W3 Schools to find reliable code to copy. There's lots to love about CSS. In a relatively simple document, you can control the style of hundreds of HTML documents and ensure consistency. But you can also pinpoint one specific margin or border and change its color or add some padding. One final note: to ensure that your CSS actually appears on your page, you need to add a piece of code to your HTML document that references the CSS document. We'll do this in Activity X. Your domain Activities Activity 1: Install WordPress Login to the Cpanel for your domain by adding /cpanel to the end of your URL. Use the username and password sent to you by Reclaim Hosting/Jason Mickel. You should see a Wordpress icon near the top of the page. Click on it to begin installing Wordpress. Find the \"install this application\" button. Work through the installation. You can leave the default settings except for the following: Directory - since you might want to use this domain for other things, let's put course materials in a subdirectory, such as http://www.mackenziekbrooks.info/dci102 . Change the administrator username and password to something you are likely to remember. Customize the website title and tagline. Press install to finish up. You should now be able to access your wordpress admin interface by appending /wp-admin to your selected URL. Add your website address to the class Box folder DCI102-F19-data > Website Registry.boxnote Activity 2: Customize WordPress Change your theme by going to Appearance > Themes . Select an installed theme, or find a new one with the Add New button. Activate multiple themes to try them out! Check your comment settings in Settings > Discussion to make sure your classmates will be able to comment on your posts. Set up your menu (remember we'll have 3 units with similar assignments) by going to Appearance > Menus . You will need to create a menu, add pages to it, and select a location for that menu. This is usually the most confusing part of Wordpress! Before you start adding content to your site, play around with as many of the settings and features as possible. What do all the bells and whistles do? Add your own images or colors. This is your site! Activity 3: HTML Open your favorite text editor and using the W3 Schools as a guide, write your own HTML document. Save the file as index.html in your Box folder. I'm not grading this, but it will help me troubleshoot if necessary. To view your page in the browswer, open index.html in your browser, usually with the key commands Ctrl + o You should include the basic set of tags: <html> <head> <title> <body> Add seven additional types of tags to the body of your HTML document, including a table, link, and image. Add an additional HTML page and link the two pages. Activity 4: CSS Create a separate CSS document and save it as style.css in the same folder you created for Activity 1. Link the style.css file to your HTML document. Consult the W3 Schools to figure out how to do this. Add a background color. Change the border on your table. Add style to your links when you hover over them. Activity 5: Make it live When you opened your HTML files in your browser, you were viewing your files locally. Only you could see them on your computer. Now it's time to upload them to your domain so other people can view them. Navigate to http://yourdomain.wludci.info/cpanel and login. In CPanel, open up the File Manager. Navigate to the public_html folder. Create a new folder titled activities or something similar. Upload all your HTML and CSS files. Navigate to your equivalent of www.yourdomain.com/activities . What do you see? Add a link to this URL to our shared Box folder in the website registry. Activity 6 First, share with your partner one realization you had while learning HTML/CSS. It can be technical like \"don't forget that slash\" or conceptual \"I realized I need to read directions more closely.\" Second, visit each other's new website. Right click/Ctrl + Click to view page source . Proof your partner's code. Check their syntax. Work together to add the following to each of your websites: an iframe that embeds another website two div tags with different background colors (hint, you'll need to use a class or id) Be sure to upload your changes to your website. Readings Resources","title":"How the Web Works"},{"location":"how-the-web-works/#what-even-is-the-internet","text":"The Internet is magic! Just kidding, it's not, but it can certainly seem that way. Maybe you're reading this on your phone in the middle of the lawn, or curled up in bed with your laptop. It's more than likely that you're using Wi-Fi or a cellular network and therefore have no physical connection to the Internet. It's understandable that it feels like magic sometimes! But in reality, the Internet is an immensely physical thing. Put simply, it is computers connected to other computers. The information (text or media and all forms in between) you send and receive travels through wires and fiber-optic cables in the ground and even under the ocean . These connected or \"networked\" computers talk to each other using their own languages or more precisely, specific protocols. For instance, every computer has an address, known as an IP (Internet Protocol) address, to help direct traffic to the right place. Another protocol that you use, even if you don't realize it, is the Hypertext Transfer Protocol, or HTTP. Your browser uses HTTP to render websites. When you type in http://www.wlu.edu your browser sends out a request to the computer that can serve up all the files at that particular address. The \"server\" returns the files and your browser (Safari, Chrome, Firefox) renders them into a website. At its simplest, a website is just a folder full of files and images. Those files are full of code, which we'll learn about in the next section. Make sense? Here are a few videos that might help you visualize this great network of computers: What is the Internet? The Internet: Wires, Cables, and Wi-fi","title":"What even is the Internet?"},{"location":"how-the-web-works/#html","text":"HTML, or Hypertext Markup Language, is one of the basic building blocks of the web. Every website you see is created using this language, from the most basic to most interactive. To prove it, go to your browser open up a new tab right now. Visit any website you like. Right click, or ctrl + click to open up an options menu. Select View Page Source . If you're using Safari, try pressing Command + Option + i . You should see a new window full of text surrounded by angle brackets. That's HTML. HTML stands for HyperText Markup Language. It is a set of tags, or elements , that adds structure to a document or page. When you write a document, you rely on style to indicate something about the text. You might put the title in a bigger font or break up paragraphs with tabs or new lines. Markup languages do this by adding tags around the content you wish to set apart. For example: <h1>This is a top level heading</h1> is HTML that tells the browser to 1) increase the size of the text, but more importantly 2) that this piece of text represents a major section of the document. Which pieces of text on this page are an <h1> ? Can you use the View Page Source trick to confirm? What are other tags that you might expect to exist? If you were to analyze a website, what are the major components? What are the familiar conventions of websites, regardless of the type? Some things that come to mind: menus or navigation <nav> , images <img src=\"kittens.jpg\"> , or even just your basic paragraph <p> . To give you a taste, a basic HTML document might look like this: <html> <head> <title>My Awesome Website</title> </head> <body> <h1>Welcome/h1> <p>This is a long paragraph about my cat.</p> </body> </html> As you can see, angle brackets surround each tag. The tags themselves around pieces of content. There's an opening tag and a closing tag. You can tell the closing tag by the slash after the angle bracket </title> . You should also notice that the tags are nested. The <head> and <body> tag are both children of <html> , and each of those tags has their own children. We'll learn more HTML down in Activity X. For now, the thing to remember is that HTML exists to tell the computer, specifically the browser, what to do with each piece of content. Another way to say this is semantic markup . Attaching structural or semantic meaning to content is especially important because not everyone (people or computers) uses their eyes to read the Web. Using valid HTML ensures that the Web is accessible to everyone, regardless of their ability. Even if you don't go on to build websites for a living, something as simple as adding a caption to any image you publish can improve accessibility.","title":"HTML"},{"location":"how-the-web-works/#text-editors","text":"Before we move on, there's one other important thing to understand about writing HTML. HTML documents are plain text documents. You don't write HTML in a Word doc or a Google doc, instead it's best to use a piece of software called a text editor. There are many text editors out there and it's personal preference which one you use. I like one called Sublime , but I know others use Atom or Visual Studio . Try a few out to see which one suits you. Even though the text is \"plain\", text editors have a feature called syntax highlighting , which means that the text changes color to help you write good code. When it's time to see what your markup or code can do, you'll need to open it in your browser.","title":"Text Editors"},{"location":"how-the-web-works/#css","text":"Our next building block of the web is CSS, or Cascading Style Sheets. We just learned that HTML will add structure to your document, but you need something else to add the pretty colors and images, also known as style . A style sheet is a plain text document that lists all the styles that you want to apply to your page. The cascading part means that you can be selective about how elements appear. If you analyze this page, what styles would you guess are in play? Are there some elements that look different than other elements? Cascading style sheets allow me to indicate that I want my headings to use a different font than my body text, for instance. CSS uses a different syntax than HTML. It can be a little confusing because it relies on HTML tags, but the structure is a little different. Think about HTML as a document, and CSS as a separate list. Here's an example: body { background-color: aquamarine; font-family: Helvetica, sans-serif; } h1 { font-size: 150%; } The first step is to identify the HTML tag you wish to style. Here, we're styling everything that lives within the <body> tag. In CSS language, this is a selector. Once we identify our selector, we list, or declare the things we want to style within a pair of curly brackets. This can be called the \"declaration block.\" We identify the thing, or \"property\" we wish to style, followed by a colon, then list the \"value\" we want to use, ending with a semi-colon. In CSS terms, it looks like this: selector { property: value; otherProperty: anotherValue; } The syntax takes getting used to, but remember, you do not have to memorize every property or selector. Even experienced Web designers have to look things up. I recommend using the W3 Schools to find reliable code to copy. There's lots to love about CSS. In a relatively simple document, you can control the style of hundreds of HTML documents and ensure consistency. But you can also pinpoint one specific margin or border and change its color or add some padding. One final note: to ensure that your CSS actually appears on your page, you need to add a piece of code to your HTML document that references the CSS document. We'll do this in Activity X.","title":"CSS"},{"location":"how-the-web-works/#your-domain","text":"","title":"Your domain"},{"location":"how-the-web-works/#activities","text":"","title":"Activities"},{"location":"how-the-web-works/#activity-1-install-wordpress","text":"Login to the Cpanel for your domain by adding /cpanel to the end of your URL. Use the username and password sent to you by Reclaim Hosting/Jason Mickel. You should see a Wordpress icon near the top of the page. Click on it to begin installing Wordpress. Find the \"install this application\" button. Work through the installation. You can leave the default settings except for the following: Directory - since you might want to use this domain for other things, let's put course materials in a subdirectory, such as http://www.mackenziekbrooks.info/dci102 . Change the administrator username and password to something you are likely to remember. Customize the website title and tagline. Press install to finish up. You should now be able to access your wordpress admin interface by appending /wp-admin to your selected URL. Add your website address to the class Box folder DCI102-F19-data > Website Registry.boxnote","title":"Activity 1: Install WordPress"},{"location":"how-the-web-works/#activity-2-customize-wordpress","text":"Change your theme by going to Appearance > Themes . Select an installed theme, or find a new one with the Add New button. Activate multiple themes to try them out! Check your comment settings in Settings > Discussion to make sure your classmates will be able to comment on your posts. Set up your menu (remember we'll have 3 units with similar assignments) by going to Appearance > Menus . You will need to create a menu, add pages to it, and select a location for that menu. This is usually the most confusing part of Wordpress! Before you start adding content to your site, play around with as many of the settings and features as possible. What do all the bells and whistles do? Add your own images or colors. This is your site!","title":"Activity 2: Customize WordPress"},{"location":"how-the-web-works/#activity-3-html","text":"Open your favorite text editor and using the W3 Schools as a guide, write your own HTML document. Save the file as index.html in your Box folder. I'm not grading this, but it will help me troubleshoot if necessary. To view your page in the browswer, open index.html in your browser, usually with the key commands Ctrl + o You should include the basic set of tags: <html> <head> <title> <body> Add seven additional types of tags to the body of your HTML document, including a table, link, and image. Add an additional HTML page and link the two pages.","title":"Activity 3: HTML"},{"location":"how-the-web-works/#activity-4-css","text":"Create a separate CSS document and save it as style.css in the same folder you created for Activity 1. Link the style.css file to your HTML document. Consult the W3 Schools to figure out how to do this. Add a background color. Change the border on your table. Add style to your links when you hover over them.","title":"Activity 4: CSS"},{"location":"how-the-web-works/#activity-5-make-it-live","text":"When you opened your HTML files in your browser, you were viewing your files locally. Only you could see them on your computer. Now it's time to upload them to your domain so other people can view them. Navigate to http://yourdomain.wludci.info/cpanel and login. In CPanel, open up the File Manager. Navigate to the public_html folder. Create a new folder titled activities or something similar. Upload all your HTML and CSS files. Navigate to your equivalent of www.yourdomain.com/activities . What do you see? Add a link to this URL to our shared Box folder in the website registry.","title":"Activity 5: Make it live"},{"location":"how-the-web-works/#activity-6","text":"First, share with your partner one realization you had while learning HTML/CSS. It can be technical like \"don't forget that slash\" or conceptual \"I realized I need to read directions more closely.\" Second, visit each other's new website. Right click/Ctrl + Click to view page source . Proof your partner's code. Check their syntax. Work together to add the following to each of your websites: an iframe that embeds another website two div tags with different background colors (hint, you'll need to use a class or id) Be sure to upload your changes to your website.","title":"Activity 6"},{"location":"how-the-web-works/#readings","text":"","title":"Readings"},{"location":"how-the-web-works/#resources","text":"","title":"Resources"},{"location":"visualization/","text":"Visualization","title":"Visualization"},{"location":"visualization/#visualization","text":"","title":"Visualization"},{"location":"what-is-humanities-data/","text":"What is Humanities Data?","title":"What is Humanities Data?"},{"location":"what-is-humanities-data/#what-is-humanities-data","text":"","title":"What is Humanities Data?"},{"location":"your-computer/","text":"What is your Command Line Most of us interact with our computers or phones through highly visual interfaces. We know what button to press because of the stylized image representing it. We understand what it means when a website has a blue \"f\" or when a friend sends a thumbs-up emoji. Your computer, regardless of operating system, wants to interact with you via visual cues. We call these Graphical User Interfaces aka GUI (pronounced gooey). But there's another way. You can interact with your computer entirely via text commands through something called a Command Line Interface or CLI. When you see a hacker typing green text into a black box in a movie, they're using the command line. But the command line isn't just for hacking. Why then? The command line gives you power. It frees you from a lot of clicking and lets you inhabit a world where your computer does exactly what you say. The command line lets you script and automate tasks and processes. It lets you perform the same set of actions on a one file or on many files many times over. The command line is often used for installing and running DH tools. The command line is a helpful tool for inspecting and altering data. How Mac vs. Windows. The commands are not always the same, so this will be a hassle. This hassle will continue well into your adult life. If you're on a Mac, search for an app called Terminal. If you're on Windows, open cmd.exe or Powershell. Learn There are a lot of resources for learning the command line. We'll be using The Command Line Crash Course in this class. Programming Historian offers Intro to the Bash Command Line and Intro to Powershell . Scholars' Lab has a great tutorial . Prof. Brandon Walsh wrote a Command Line Quiz . The sourcecaster by Thomas Padilla and James Baker. Exercises","title":"Your Computer"},{"location":"your-computer/#what-is-your","text":"","title":"What is your"},{"location":"your-computer/#command-line","text":"Most of us interact with our computers or phones through highly visual interfaces. We know what button to press because of the stylized image representing it. We understand what it means when a website has a blue \"f\" or when a friend sends a thumbs-up emoji. Your computer, regardless of operating system, wants to interact with you via visual cues. We call these Graphical User Interfaces aka GUI (pronounced gooey). But there's another way. You can interact with your computer entirely via text commands through something called a Command Line Interface or CLI. When you see a hacker typing green text into a black box in a movie, they're using the command line. But the command line isn't just for hacking.","title":"Command Line"},{"location":"your-computer/#why-then","text":"The command line gives you power. It frees you from a lot of clicking and lets you inhabit a world where your computer does exactly what you say. The command line lets you script and automate tasks and processes. It lets you perform the same set of actions on a one file or on many files many times over. The command line is often used for installing and running DH tools. The command line is a helpful tool for inspecting and altering data.","title":"Why then?"},{"location":"your-computer/#how","text":"Mac vs. Windows. The commands are not always the same, so this will be a hassle. This hassle will continue well into your adult life. If you're on a Mac, search for an app called Terminal. If you're on Windows, open cmd.exe or Powershell.","title":"How"},{"location":"your-computer/#learn","text":"There are a lot of resources for learning the command line. We'll be using The Command Line Crash Course in this class. Programming Historian offers Intro to the Bash Command Line and Intro to Powershell . Scholars' Lab has a great tutorial . Prof. Brandon Walsh wrote a Command Line Quiz . The sourcecaster by Thomas Padilla and James Baker.","title":"Learn"},{"location":"your-computer/#exercises","text":"","title":"Exercises"}]}