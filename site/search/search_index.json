{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is this? # The Humanities Data Coursebook is a set of open modules for teaching skills and methods for working with humanities-based data. Each section contains a text-based lecture, hands-on activities, assignment and assessment ideas, and further reading and resources. This coursebook grew out of a specific course, DCI 102: Data in the Humanities, taught within a minor in Digital Culture and Information at Washington and Lee University. Who is this for? # The coursebook is designed for an undergraduate audience new to working with digital methods. While a background in the humanities is helpful, it is not a prerequisite. This coursebook contains methods that can be applied to a range of disciplines. The modules can be used for self-study, or taken and adapted by any instructor. What are the learning goals? # Recognize and assess data-driven digital projects. Integrate research goals and digital methods with discipline-specific inquiry. Develop skills necessary to create, structure, clean, manipulate, and visualize data. Engage in collaborative, interdisciplinary, project-based learning. Create professional website to document and present unit assignments. How to use # This coursebook is written in Markdown, so it can be easily adapted to a variety of other publishing platforms. Markdown is a basic syntax for writing for the Web, so the basic structure can be transformed into other formats. Specifically, this site uses a a static site generator called MKDocs along with GitHub pages. You can find the repository of Markdown files on GitHub. Who made this? # This coursebook was made by Mackenzie Brooks , Associate Professor and Digital Humanities Librarian at Washington and Lee University. License # Acknowledgments # This coursebook was inspired by the Text Analysis Coursebook created by Brandon Walsh and Sarah Horowitz . Both should be acknowledged beyond the coursebook for their generous and ongoing conversations about pedagogy and Digital Humanities. Manatee icon credit: Freepik from www.flaticon.com .","title":"Humanities Data Coursebook"},{"location":"#what-is-this","text":"The Humanities Data Coursebook is a set of open modules for teaching skills and methods for working with humanities-based data. Each section contains a text-based lecture, hands-on activities, assignment and assessment ideas, and further reading and resources. This coursebook grew out of a specific course, DCI 102: Data in the Humanities, taught within a minor in Digital Culture and Information at Washington and Lee University.","title":"What is this?"},{"location":"#who-is-this-for","text":"The coursebook is designed for an undergraduate audience new to working with digital methods. While a background in the humanities is helpful, it is not a prerequisite. This coursebook contains methods that can be applied to a range of disciplines. The modules can be used for self-study, or taken and adapted by any instructor.","title":"Who is this for?"},{"location":"#what-are-the-learning-goals","text":"Recognize and assess data-driven digital projects. Integrate research goals and digital methods with discipline-specific inquiry. Develop skills necessary to create, structure, clean, manipulate, and visualize data. Engage in collaborative, interdisciplinary, project-based learning. Create professional website to document and present unit assignments.","title":"What are the learning goals?"},{"location":"#how-to-use","text":"This coursebook is written in Markdown, so it can be easily adapted to a variety of other publishing platforms. Markdown is a basic syntax for writing for the Web, so the basic structure can be transformed into other formats. Specifically, this site uses a a static site generator called MKDocs along with GitHub pages. You can find the repository of Markdown files on GitHub.","title":"How to use"},{"location":"#who-made-this","text":"This coursebook was made by Mackenzie Brooks , Associate Professor and Digital Humanities Librarian at Washington and Lee University.","title":"Who made this?"},{"location":"#license","text":"","title":"License"},{"location":"#acknowledgments","text":"This coursebook was inspired by the Text Analysis Coursebook created by Brandon Walsh and Sarah Horowitz . Both should be acknowledged beyond the coursebook for their generous and ongoing conversations about pedagogy and Digital Humanities. Manatee icon credit: Freepik from www.flaticon.com .","title":"Acknowledgments"},{"location":"assignments/","text":"Specifications Grading # The assignment and grading structure for this course might be a little different than what you're used to. In this course, we'll use something called Specifications Grading . The goals of the system are to reduce the stress and mystery of grades while also raising academic standards. I chose this system to complement the technologies and digital methods we will be learning this term, as well as to combat grade anxiety. It is more important to me that you explore and experiment with these methods than it is that you get the \"right answer.\" It's hard to feel comfortable experimenting and making mistakes if you're worried about every point. So rather than assign points or grades, I will mark each assignment as Complete/Incomplete according to a set of specifications. You must complete a certain number of assignments in each category to receive an A, B, C, etc. as listed below. You will receive three tokens to use in the case that you cannot turn in work on time or to complete an incomplete assignment. You will use Canvas to turn in assignments and to receive feedback. I will mark your assignments as complete/incomplete, however! Canvas will not be able to calculate your current grade with this system. You should rely on this page or this handout to help calculate your grade. This is a lot to get used to at first, so please ask any questions you have early in the semester. We will do a midterm check-in so you have a good understanding of where you are. Grading Scale # To earn a... Complete the following A 7 weekly activity logs 10-12 blog posts 5 project pieces B 6 weekly activity logs 8 or 9 blog posts 4 project pieces C 5 weekly activity logs 6 or 7 blog posts 3 project pieces D less than 5 weekly activity logs less than 5 blog posts less than 3 project pieces Weekly Activity Logs # Each week you'll complete several activities designed to increase your familiarity with your computer, digital methods, and digital tools. Many of these activities will be started or completed together in our class sessions, but some you'll be expected to do on your own. Many of these activities will be about learning a process or method, rather than delivering the right answer. You will share your results on your website and instructions for what to share will be posted on the schedule with the due date. Blog posts # Each week you'll write a 300-500 word blog post on your course website. Prompts will be provided with each week's activity log, posted on the schedule. These posts will ask you to do one or more of the following: 1) reflect on what you've learned this week 2) make connections between new skills and readings or 3) get you thinking and prepared for the project. Humanities Data Project # In the second half of the term, you will design and conduct an independent data-driven project. This project asks you adopt one or more of the methods we've learned so far and apply it to a humanities-based topic of your choosing. You will select a text or body of material, identify potential research questions, create a data model and data set, then visualize and analyze your data in a way that attempts to address your research questions. The project will consist of five pieces: Project proposal Data model Data visualization Results Reflection","title":"Assignments"},{"location":"assignments/#specifications-grading","text":"The assignment and grading structure for this course might be a little different than what you're used to. In this course, we'll use something called Specifications Grading . The goals of the system are to reduce the stress and mystery of grades while also raising academic standards. I chose this system to complement the technologies and digital methods we will be learning this term, as well as to combat grade anxiety. It is more important to me that you explore and experiment with these methods than it is that you get the \"right answer.\" It's hard to feel comfortable experimenting and making mistakes if you're worried about every point. So rather than assign points or grades, I will mark each assignment as Complete/Incomplete according to a set of specifications. You must complete a certain number of assignments in each category to receive an A, B, C, etc. as listed below. You will receive three tokens to use in the case that you cannot turn in work on time or to complete an incomplete assignment. You will use Canvas to turn in assignments and to receive feedback. I will mark your assignments as complete/incomplete, however! Canvas will not be able to calculate your current grade with this system. You should rely on this page or this handout to help calculate your grade. This is a lot to get used to at first, so please ask any questions you have early in the semester. We will do a midterm check-in so you have a good understanding of where you are.","title":"Specifications Grading"},{"location":"assignments/#grading-scale","text":"To earn a... Complete the following A 7 weekly activity logs 10-12 blog posts 5 project pieces B 6 weekly activity logs 8 or 9 blog posts 4 project pieces C 5 weekly activity logs 6 or 7 blog posts 3 project pieces D less than 5 weekly activity logs less than 5 blog posts less than 3 project pieces","title":"Grading Scale"},{"location":"assignments/#weekly-activity-logs","text":"Each week you'll complete several activities designed to increase your familiarity with your computer, digital methods, and digital tools. Many of these activities will be started or completed together in our class sessions, but some you'll be expected to do on your own. Many of these activities will be about learning a process or method, rather than delivering the right answer. You will share your results on your website and instructions for what to share will be posted on the schedule with the due date.","title":"Weekly Activity Logs"},{"location":"assignments/#blog-posts","text":"Each week you'll write a 300-500 word blog post on your course website. Prompts will be provided with each week's activity log, posted on the schedule. These posts will ask you to do one or more of the following: 1) reflect on what you've learned this week 2) make connections between new skills and readings or 3) get you thinking and prepared for the project.","title":"Blog posts"},{"location":"assignments/#humanities-data-project","text":"In the second half of the term, you will design and conduct an independent data-driven project. This project asks you adopt one or more of the methods we've learned so far and apply it to a humanities-based topic of your choosing. You will select a text or body of material, identify potential research questions, create a data model and data set, then visualize and analyze your data in a way that attempts to address your research questions. The project will consist of five pieces: Project proposal Data model Data visualization Results Reflection","title":"Humanities Data Project"},{"location":"data/","text":"Data #","title":"Data"},{"location":"data/#data","text":"","title":"Data"},{"location":"how-the-web-works/","text":"In this section, we'll explore how Internet works, learn the basics of HTML and CSS, and setup your own website on WordPress. Before we can start doing research with humanities data, we need to understand a little bit about the context of our digital world. Table of Contents: What even is the Internet? HTML Text Editors CSS Your domain Privacy Reclaim Hosting WordPress Activities Activity 1: HTML Activity 2: CSS Activity 3: Make it live Activity 4: Install WordPress Activity 5: Customize WordPress Activity 6 Readings Resources What even is the Internet? # The Internet is magic! Just kidding, it's not, but it can certainly seem that way. Maybe you're reading this on your phone in the middle of the lawn, or curled up in bed with your laptop. It's more than likely that you're using Wi-Fi or a cellular network and therefore have no physical connection to the Internet. It's understandable that it feels like magic sometimes! But in reality, the Internet is an immensely physical thing. Put simply, it is computers connected to other computers. The information (text or media and all forms in between) you send and receive travels through wires and fiber-optic cables in the ground and even under the ocean . These connected or \"networked\" computers talk to each other using their own languages or more precisely, specific protocols. For instance, every computer has an address, known as an IP (Internet Protocol) address, to help direct traffic to the right place. Another protocol that you use, even if you don't realize it, is the Hypertext Transfer Protocol, or HTTP. Your browser uses HTTP to render websites. When you type in http://www.wlu.edu your browser sends out a request to the computer that can serve up all the files at that particular address. The \"server\" returns the files and your browser (Safari, Chrome, Firefox) renders them into a website. At its simplest, a website is just a folder full of files and images. Those files are full of code, which we'll learn about in the next section. Make sense? Here are a few videos that might help you visualize this great network of computers: What is the Internet? The Internet: Wires, Cables, and Wi-fi HTML # HTML, or Hypertext Markup Language, is one of the basic building blocks of the web. Every website you see is created using this language, from the most basic to most interactive. To prove it, go to your browser open up a new tab right now. Visit any website you like. Right click, or ctrl + click to open up an options menu. Select View Page Source . If you're using Safari, try pressing Command + Option + i . You should see a new window full of text surrounded by angle brackets. That's HTML. HTML stands for HyperText Markup Language. It is a set of tags, or elements , that adds structure to a document or page. When you write a document, you rely on style to indicate something about the text. You might put the title in a bigger font or break up paragraphs with tabs or new lines. Markup languages do this by adding tags around the content you wish to set apart. For example: <h1>This is a top level heading</h1> is HTML that tells the browser to 1) increase the size of the text, but more importantly 2) that this piece of text represents a major section of the document. Which pieces of text on this page are an <h1> ? Can you use the View Page Source trick to confirm? What are other tags that you might expect to exist? If you were to analyze a website, what are the major components? What are the familiar conventions of websites, regardless of the type? Some things that come to mind: menus or navigation <nav> , images <img src=\"kittens.jpg\"> , or even just your basic paragraph <p> . To give you a taste, a basic HTML document might look like this: <html> <head> <title>My Awesome Website</title> </head> <body> <h1>Welcome/h1> <p>This is a long paragraph about my cat.</p> </body> </html> As you can see, angle brackets surround each tag. The tags themselves around pieces of content. There's an opening tag and a closing tag. You can tell the closing tag by the slash after the angle bracket </title> . You should also notice that the tags are nested. The <head> and <body> tag are both children of <html> , and each of those tags has their own children. We'll learn more HTML down in Activity X. For now, the thing to remember is that HTML exists to tell the computer, specifically the browser, what to do with each piece of content. Another way to say this is semantic markup . Attaching structural or semantic meaning to content is especially important because not everyone (people or computers) uses their eyes to read the Web. Using valid HTML ensures that the Web is accessible to everyone, regardless of their ability. Even if you don't go on to build websites for a living, something as simple as adding a caption to any image you publish can improve accessibility. Can you find the caption or \"alt text\" for the image on this page? Text Editors # Before we move on, there's one other important thing to understand about writing HTML. HTML documents are plain text documents. You don't write HTML in a Word doc or a Google doc, instead it's best to use a piece of software called a text editor. There are many text editors out there and it's personal preference which one you use. I like one called Sublime , but I know others use Atom or Visual Studio . Try a few out to see which one suits you. Even though the text is \"plain\", text editors have a feature called syntax highlighting , which means that the text changes color to help you write good code. When it's time to see what your markup or code can do, you'll need to open it in your browser. CSS # Our next building block of the web is CSS, or Cascading Style Sheets. We just learned that HTML will add structure to your document, but you need something else to add the pretty colors and images, also known as style . A style sheet is a plain text document that lists all the styles that you want to apply to your page. The cascading part means that you can be selective about how elements appear. If you analyze this page, what styles would you guess are in play? Are there some elements that look different than other elements? Cascading style sheets allow me to indicate that I want my headings to use a different font than my body text, for instance. CSS uses a different syntax than HTML. It can be a little confusing because it relies on HTML tags, but the structure is a little different. Think about HTML as a document, and CSS as a separate list. Here's an example: body { background-color: aquamarine; font-family: Helvetica, sans-serif; } h1 { font-size: 150%; } The first step is to identify the HTML tag you wish to style. Here, we're styling everything that lives within the <body> tag. In CSS language, this is a selector. Once we identify our selector, we list, or declare the things we want to style within a pair of curly brackets. This can be called the \"declaration block.\" We identify the thing, or \"property\" we wish to style, followed by a colon, then list the \"value\" we want to use, ending with a semi-colon. In CSS terms, it looks like this: selector { property: value; otherProperty: anotherValue; } The syntax takes getting used to, but remember, you do not have to memorize every property or selector. Even experienced Web designers have to look things up. I recommend using the W3 Schools to find reliable code to copy. There's lots to love about CSS. In a relatively simple document, you can control the style of hundreds of HTML documents and ensure consistency. But you can also pinpoint one specific margin or border and change its color or add some padding. One final note: to ensure that your CSS actually appears on your page, you need to add a piece of code to your HTML document that references the CSS document. We'll do this in Activity X. Your domain # There are many reasons you might want your own website. Whether it's for work, school, volunteering, organizing, art, or just for fun, there are plenty of ways to carve out your own corner of the Web. Social media platforms like LinkedIn or Facebook are ubiquitous now, but it used to be that if you wanted to appear in search results, you had to create your own website. If you are a student or navigating the professional world, chances are that 1) someone out there might Google you and 2) you want them to see accurate information and work that you're proud of. A professional website can be a simple single page with limited information, or it can contain your whole life. Chances are, at some point you've relied on information from a personal website. Maybe you found an article you need for a bibliography, a snippet of code that had been giving you trouble, or even an email address for someone who has lost their wallet. If you're conducting research in a field, there are others who might be interested in the work you're doing. Check out the sites of others in your intended field of study to see what their websites look like. Some scholars share articles they've written, code libraries, data they've gathered, or new methods they're experimenting with. In the Digital Humanities, a field where many humanists work with data, open and public scholarship is highly valued. Many of the links in this coursebook go to the websites of DH-ers who have been generous to share a tutorial or write up their thoughts on a particular method. Whether you create a professional portfolio or not, there is a lot to be said for the form of a Website. Most of the scholarship we read, not to mention everything else, has been designed and formatted to be consumed on the Web. Presenting your own work in that format gives you experience with seemingly silly things like getting your images to float nicely with your text or finding a place to reliably store your data. Creating a clean, well-organized website is harder than it looks! Just like it's easier to read a paragraph than to write one, creating a website takes practice. I recommend posting the exercises and projects of this coursebook to your own website. Privacy # All that being said, you do not have to have a strong presence on the Web. You may have personal and legitimate reasons for not wanting to be found in search results. If you're a student, you may not want your homework following you for decades to come. You have the right to privacy and to completing your coursework in a secure way. Reclaim Hosting # There are many places to find space on the Web, but many individuals and academic institutions work with Reclaim Hosting , an education-focused web hosting company. Reclaim offers reasonable rates, good support, and an awareness of the needs of academic projects. Some institutions offer a \"domain of one's\" program in which affiliated individuals can obtain a domain. WordPress # Activities # Activity 1: HTML # Open your favorite text editor and using the W3 Schools as a guide, write your own HTML document. Save the file as index.html in your Box folder. I'm not grading this, but it will help me troubleshoot if necessary. To view your page in the browser, open index.html in your browser, usually with the key commands Ctrl + o You should include the basic set of tags: <html> <head> <title> <body> Add seven additional types of tags to the body of your HTML document, including a table, link, and image. Add an additional HTML page and link the two pages. Activity 2: CSS # Create a separate CSS document and save it as style.css in the same folder you created for Activity 1. Link the style.css file to your HTML document. Consult the W3 Schools to figure out how to do this. Add a background color. Change the border on your table. Add style to your links when you hover over them. Activity 3: Make it live # When you opened your HTML files in your browser, you were viewing your files locally. Only you could see them on your computer. Now it's time to upload them to your domain so other people can view them. Navigate to http://yourdomain.wludci.info/cpanel and login. In CPanel, open up the File Manager. Navigate to the public_html folder. Create a new folder titled activities or something similar. Upload all your HTML and CSS files. Navigate to your equivalent of www.yourdomain.com/activities . What do you see? Add a link to this URL to our shared Box folder in the website registry. Activity 4: Install WordPress # Login to the Cpanel for your domain by adding /cpanel to the end of your URL. Use the username and password sent to you by Reclaim Hosting/Jason Mickel. You should see a Wordpress icon near the top of the page. Click on it to begin installing Wordpress. Find the \"install this application\" button. Work through the installation. You can leave the default settings except for the following: Directory - since you might want to use this domain for other things, let's put course materials in a subdirectory, such as http://www.mydomain.info/dci102 . Change the administrator username and password to something you are likely to remember. Customize the website title and tagline. Press install to finish up. You should now be able to access your wordpress admin interface by appending /wp-admin to your selected URL. Add your website address to the class Box folder DCI102-F19-data > Website Registry.boxnote Activity 5: Customize WordPress # Change your theme by going to Appearance > Themes . Select an installed theme, or find a new one with the Add New button. Activate multiple themes to try them out! Check your comment settings in Settings > Discussion to make sure your classmates will be able to comment on your posts. Set up your menu (remember we'll have 3 units with similar assignments) by going to Appearance > Menus . You will need to create a menu, add pages to it, and select a location for that menu. This is usually the most confusing part of Wordpress! Before you start adding content to your site, play around with as many of the settings and features as possible. What do all the bells and whistles do? Add your own images or colors. This is your site! Activity 6 # First, share with your partner one realization you had while learning HTML/CSS. It can be technical like \"don't forget that slash\" or conceptual \"I realized I need to read directions more closely.\" Second, visit each other's new website. Right click/Ctrl + Click to view page source . Proof your partner's code. Check their syntax. Work together to add the following to each of your websites: an iframe that embeds another website two div tags with different background colors (hint, you'll need to use a class or id) Be sure to upload your changes to your website. Readings # Resources #","title":"How the Web Works"},{"location":"how-the-web-works/#what-even-is-the-internet","text":"The Internet is magic! Just kidding, it's not, but it can certainly seem that way. Maybe you're reading this on your phone in the middle of the lawn, or curled up in bed with your laptop. It's more than likely that you're using Wi-Fi or a cellular network and therefore have no physical connection to the Internet. It's understandable that it feels like magic sometimes! But in reality, the Internet is an immensely physical thing. Put simply, it is computers connected to other computers. The information (text or media and all forms in between) you send and receive travels through wires and fiber-optic cables in the ground and even under the ocean . These connected or \"networked\" computers talk to each other using their own languages or more precisely, specific protocols. For instance, every computer has an address, known as an IP (Internet Protocol) address, to help direct traffic to the right place. Another protocol that you use, even if you don't realize it, is the Hypertext Transfer Protocol, or HTTP. Your browser uses HTTP to render websites. When you type in http://www.wlu.edu your browser sends out a request to the computer that can serve up all the files at that particular address. The \"server\" returns the files and your browser (Safari, Chrome, Firefox) renders them into a website. At its simplest, a website is just a folder full of files and images. Those files are full of code, which we'll learn about in the next section. Make sense? Here are a few videos that might help you visualize this great network of computers: What is the Internet? The Internet: Wires, Cables, and Wi-fi","title":"What even is the Internet?"},{"location":"how-the-web-works/#html","text":"HTML, or Hypertext Markup Language, is one of the basic building blocks of the web. Every website you see is created using this language, from the most basic to most interactive. To prove it, go to your browser open up a new tab right now. Visit any website you like. Right click, or ctrl + click to open up an options menu. Select View Page Source . If you're using Safari, try pressing Command + Option + i . You should see a new window full of text surrounded by angle brackets. That's HTML. HTML stands for HyperText Markup Language. It is a set of tags, or elements , that adds structure to a document or page. When you write a document, you rely on style to indicate something about the text. You might put the title in a bigger font or break up paragraphs with tabs or new lines. Markup languages do this by adding tags around the content you wish to set apart. For example: <h1>This is a top level heading</h1> is HTML that tells the browser to 1) increase the size of the text, but more importantly 2) that this piece of text represents a major section of the document. Which pieces of text on this page are an <h1> ? Can you use the View Page Source trick to confirm? What are other tags that you might expect to exist? If you were to analyze a website, what are the major components? What are the familiar conventions of websites, regardless of the type? Some things that come to mind: menus or navigation <nav> , images <img src=\"kittens.jpg\"> , or even just your basic paragraph <p> . To give you a taste, a basic HTML document might look like this: <html> <head> <title>My Awesome Website</title> </head> <body> <h1>Welcome/h1> <p>This is a long paragraph about my cat.</p> </body> </html> As you can see, angle brackets surround each tag. The tags themselves around pieces of content. There's an opening tag and a closing tag. You can tell the closing tag by the slash after the angle bracket </title> . You should also notice that the tags are nested. The <head> and <body> tag are both children of <html> , and each of those tags has their own children. We'll learn more HTML down in Activity X. For now, the thing to remember is that HTML exists to tell the computer, specifically the browser, what to do with each piece of content. Another way to say this is semantic markup . Attaching structural or semantic meaning to content is especially important because not everyone (people or computers) uses their eyes to read the Web. Using valid HTML ensures that the Web is accessible to everyone, regardless of their ability. Even if you don't go on to build websites for a living, something as simple as adding a caption to any image you publish can improve accessibility. Can you find the caption or \"alt text\" for the image on this page?","title":"HTML"},{"location":"how-the-web-works/#text-editors","text":"Before we move on, there's one other important thing to understand about writing HTML. HTML documents are plain text documents. You don't write HTML in a Word doc or a Google doc, instead it's best to use a piece of software called a text editor. There are many text editors out there and it's personal preference which one you use. I like one called Sublime , but I know others use Atom or Visual Studio . Try a few out to see which one suits you. Even though the text is \"plain\", text editors have a feature called syntax highlighting , which means that the text changes color to help you write good code. When it's time to see what your markup or code can do, you'll need to open it in your browser.","title":"Text Editors"},{"location":"how-the-web-works/#css","text":"Our next building block of the web is CSS, or Cascading Style Sheets. We just learned that HTML will add structure to your document, but you need something else to add the pretty colors and images, also known as style . A style sheet is a plain text document that lists all the styles that you want to apply to your page. The cascading part means that you can be selective about how elements appear. If you analyze this page, what styles would you guess are in play? Are there some elements that look different than other elements? Cascading style sheets allow me to indicate that I want my headings to use a different font than my body text, for instance. CSS uses a different syntax than HTML. It can be a little confusing because it relies on HTML tags, but the structure is a little different. Think about HTML as a document, and CSS as a separate list. Here's an example: body { background-color: aquamarine; font-family: Helvetica, sans-serif; } h1 { font-size: 150%; } The first step is to identify the HTML tag you wish to style. Here, we're styling everything that lives within the <body> tag. In CSS language, this is a selector. Once we identify our selector, we list, or declare the things we want to style within a pair of curly brackets. This can be called the \"declaration block.\" We identify the thing, or \"property\" we wish to style, followed by a colon, then list the \"value\" we want to use, ending with a semi-colon. In CSS terms, it looks like this: selector { property: value; otherProperty: anotherValue; } The syntax takes getting used to, but remember, you do not have to memorize every property or selector. Even experienced Web designers have to look things up. I recommend using the W3 Schools to find reliable code to copy. There's lots to love about CSS. In a relatively simple document, you can control the style of hundreds of HTML documents and ensure consistency. But you can also pinpoint one specific margin or border and change its color or add some padding. One final note: to ensure that your CSS actually appears on your page, you need to add a piece of code to your HTML document that references the CSS document. We'll do this in Activity X.","title":"CSS"},{"location":"how-the-web-works/#your-domain","text":"There are many reasons you might want your own website. Whether it's for work, school, volunteering, organizing, art, or just for fun, there are plenty of ways to carve out your own corner of the Web. Social media platforms like LinkedIn or Facebook are ubiquitous now, but it used to be that if you wanted to appear in search results, you had to create your own website. If you are a student or navigating the professional world, chances are that 1) someone out there might Google you and 2) you want them to see accurate information and work that you're proud of. A professional website can be a simple single page with limited information, or it can contain your whole life. Chances are, at some point you've relied on information from a personal website. Maybe you found an article you need for a bibliography, a snippet of code that had been giving you trouble, or even an email address for someone who has lost their wallet. If you're conducting research in a field, there are others who might be interested in the work you're doing. Check out the sites of others in your intended field of study to see what their websites look like. Some scholars share articles they've written, code libraries, data they've gathered, or new methods they're experimenting with. In the Digital Humanities, a field where many humanists work with data, open and public scholarship is highly valued. Many of the links in this coursebook go to the websites of DH-ers who have been generous to share a tutorial or write up their thoughts on a particular method. Whether you create a professional portfolio or not, there is a lot to be said for the form of a Website. Most of the scholarship we read, not to mention everything else, has been designed and formatted to be consumed on the Web. Presenting your own work in that format gives you experience with seemingly silly things like getting your images to float nicely with your text or finding a place to reliably store your data. Creating a clean, well-organized website is harder than it looks! Just like it's easier to read a paragraph than to write one, creating a website takes practice. I recommend posting the exercises and projects of this coursebook to your own website.","title":"Your domain"},{"location":"how-the-web-works/#privacy","text":"All that being said, you do not have to have a strong presence on the Web. You may have personal and legitimate reasons for not wanting to be found in search results. If you're a student, you may not want your homework following you for decades to come. You have the right to privacy and to completing your coursework in a secure way.","title":"Privacy"},{"location":"how-the-web-works/#reclaim-hosting","text":"There are many places to find space on the Web, but many individuals and academic institutions work with Reclaim Hosting , an education-focused web hosting company. Reclaim offers reasonable rates, good support, and an awareness of the needs of academic projects. Some institutions offer a \"domain of one's\" program in which affiliated individuals can obtain a domain.","title":"Reclaim Hosting"},{"location":"how-the-web-works/#wordpress","text":"","title":"WordPress"},{"location":"how-the-web-works/#activities","text":"","title":"Activities"},{"location":"how-the-web-works/#activity-1-html","text":"Open your favorite text editor and using the W3 Schools as a guide, write your own HTML document. Save the file as index.html in your Box folder. I'm not grading this, but it will help me troubleshoot if necessary. To view your page in the browser, open index.html in your browser, usually with the key commands Ctrl + o You should include the basic set of tags: <html> <head> <title> <body> Add seven additional types of tags to the body of your HTML document, including a table, link, and image. Add an additional HTML page and link the two pages.","title":"Activity 1: HTML"},{"location":"how-the-web-works/#activity-2-css","text":"Create a separate CSS document and save it as style.css in the same folder you created for Activity 1. Link the style.css file to your HTML document. Consult the W3 Schools to figure out how to do this. Add a background color. Change the border on your table. Add style to your links when you hover over them.","title":"Activity 2: CSS"},{"location":"how-the-web-works/#activity-3-make-it-live","text":"When you opened your HTML files in your browser, you were viewing your files locally. Only you could see them on your computer. Now it's time to upload them to your domain so other people can view them. Navigate to http://yourdomain.wludci.info/cpanel and login. In CPanel, open up the File Manager. Navigate to the public_html folder. Create a new folder titled activities or something similar. Upload all your HTML and CSS files. Navigate to your equivalent of www.yourdomain.com/activities . What do you see? Add a link to this URL to our shared Box folder in the website registry.","title":"Activity 3: Make it live"},{"location":"how-the-web-works/#activity-4-install-wordpress","text":"Login to the Cpanel for your domain by adding /cpanel to the end of your URL. Use the username and password sent to you by Reclaim Hosting/Jason Mickel. You should see a Wordpress icon near the top of the page. Click on it to begin installing Wordpress. Find the \"install this application\" button. Work through the installation. You can leave the default settings except for the following: Directory - since you might want to use this domain for other things, let's put course materials in a subdirectory, such as http://www.mydomain.info/dci102 . Change the administrator username and password to something you are likely to remember. Customize the website title and tagline. Press install to finish up. You should now be able to access your wordpress admin interface by appending /wp-admin to your selected URL. Add your website address to the class Box folder DCI102-F19-data > Website Registry.boxnote","title":"Activity 4: Install WordPress"},{"location":"how-the-web-works/#activity-5-customize-wordpress","text":"Change your theme by going to Appearance > Themes . Select an installed theme, or find a new one with the Add New button. Activate multiple themes to try them out! Check your comment settings in Settings > Discussion to make sure your classmates will be able to comment on your posts. Set up your menu (remember we'll have 3 units with similar assignments) by going to Appearance > Menus . You will need to create a menu, add pages to it, and select a location for that menu. This is usually the most confusing part of Wordpress! Before you start adding content to your site, play around with as many of the settings and features as possible. What do all the bells and whistles do? Add your own images or colors. This is your site!","title":"Activity 5: Customize WordPress"},{"location":"how-the-web-works/#activity-6","text":"First, share with your partner one realization you had while learning HTML/CSS. It can be technical like \"don't forget that slash\" or conceptual \"I realized I need to read directions more closely.\" Second, visit each other's new website. Right click/Ctrl + Click to view page source . Proof your partner's code. Check their syntax. Work together to add the following to each of your websites: an iframe that embeds another website two div tags with different background colors (hint, you'll need to use a class or id) Be sure to upload your changes to your website.","title":"Activity 6"},{"location":"how-the-web-works/#readings","text":"","title":"Readings"},{"location":"how-the-web-works/#resources","text":"","title":"Resources"},{"location":"network-analysis/","text":"","title":"Network Analysis"},{"location":"process/","text":"","title":"Process"},{"location":"schedule/","text":"Jump to: Week 1 | Week 2 | Week 3 | Week 4 | Week 5 | Week 6 | Week 7 | Week 8 | Week 9 | Week 10 | Week 11 | Week 12 This class will meet on Zoom during its normally scheduled time: TR 4-5:30pm. Week 1 - How the Web Works # Tuesday, August 25, 2020 # Getting to know you survey Read What is Humanities Data by class time. Class agenda: introductions + icebreaker course overview breakout rooms: course charter setup + start activity 1 Thursday, August 27, 2020 # Read How the Web Works by class time. Class agenda: icebreaker: activities 2-4 together Activity log week 1 # Due Monday 9/1 at 9am Complete Activities 1-3 . In Canvas, submit the URL webpage that you have coded and uploaded to your domain. Complete Activities 4-5 . In Canvas, submit the URL to your Wordpress site. There should be evidence that you have customized your Wordpress beyond the basic settings. Blog post #1. Respond to the following prompt in a 300-500 word blog post on your Wordpress. In Canvas, submit the URL the blog post. Prompt: What brought you to this class? What is your current relationship with technology? Where do you see data in your coursework? Where do you see data in your daily life? What are your own goals for this course? What do you want to accomplish/learn/achieve? Week 2 - Your Computer # Tuesday, September 1, 2020 # Read Your Computer by class time. Class agenda: icebreaker: breakout groups: review websites in small groups First, share with your partner one realization you had while learning HTML/CSS. It can be technical like \"don't forget that slash\" or conceptual \"I realized I need to read directions more closely.\" Second, visit each other's new website. Right click/Ctrl + Click to view page source. Proof your partner's code. Check their syntax. Work together to add the following to each of your websites: an iframe that embeds another website two div tags with different background colors (hint, you'll need to use a class or id) Be sure to upload your changes to your website. start Activity 1 together Thursday, September 3, 2020 # Work through tutorials in Activity 2 by class time. Class agenda: icebreaker: Introduce Final Project Start Activity 3 together Activity log week 2 # Due Monday 9/7 at 9am Complete Activity 3. In Canvas, submit a document with your answers. It is more important that you show your process, thinking, and attempts than it is that you get everything right. Blog post #2: Respond to the following prompt in a 300-500 word blog post on your Wordpress. In Canvas, submit the URL the blog post. Prompt: How was the command line? What was hard about it? How did it change your conception of your computer? Where do you see the value in using it? Reflect on your feelings while learning this concept. When did you get frustrated? How did you overcome your frustration (or not)? How was your experience with the tutorials? Be specific about things like tone, length, images, tasks, etc. Week 3 - Data # Tuesday, September 8, 2020 # Thursday, September 10, 2020 # Week 4 - Visualization # Tuesday, September 15, 2020 # Thursday, September 17, 2020 # Week 5 - Network Analysis # Tuesday, September 22, 2020 # Thursday, September 24, 2020 # Week 6 - Spatial Analysis # Tuesday, September 29, 2020 # Thursday, October 1, 2020 # Week 7 - Text Analysis # Tuesday, October 6, 2020 # Thursday, October 8, 2020 # Week 8 - Project Planning # Tuesday, October 13, 2020 # Thursday, October 15, 2020 # Week 9 - Data Modeling # Tuesday, October 20, 2020 # Thursday, October 22, 2020 # Week 10 - Data Analysis + Visualization # Tuesday, October 27, 2020 # Thursday, October 29, 2020 # Week 11 - Results + Interpretation # Tuesday, November 3, 2020 # Thursday, November 5, 2020 # Week 12 - Wrapping up + Presentation # Tuesday, November 10, 2020 # Thursday, November 12, 2020 #","title":"Schedule"},{"location":"schedule/#week-1-how-the-web-works","text":"","title":"Week 1 - How the Web Works"},{"location":"schedule/#tuesday-august-25-2020","text":"Getting to know you survey Read What is Humanities Data by class time. Class agenda: introductions + icebreaker course overview breakout rooms: course charter setup + start activity 1","title":"Tuesday, August 25, 2020"},{"location":"schedule/#thursday-august-27-2020","text":"Read How the Web Works by class time. Class agenda: icebreaker: activities 2-4 together","title":"Thursday, August 27, 2020"},{"location":"schedule/#activity-log-week-1","text":"Due Monday 9/1 at 9am Complete Activities 1-3 . In Canvas, submit the URL webpage that you have coded and uploaded to your domain. Complete Activities 4-5 . In Canvas, submit the URL to your Wordpress site. There should be evidence that you have customized your Wordpress beyond the basic settings. Blog post #1. Respond to the following prompt in a 300-500 word blog post on your Wordpress. In Canvas, submit the URL the blog post. Prompt: What brought you to this class? What is your current relationship with technology? Where do you see data in your coursework? Where do you see data in your daily life? What are your own goals for this course? What do you want to accomplish/learn/achieve?","title":"Activity log week 1"},{"location":"schedule/#week-2-your-computer","text":"","title":"Week 2 - Your Computer"},{"location":"schedule/#tuesday-september-1-2020","text":"Read Your Computer by class time. Class agenda: icebreaker: breakout groups: review websites in small groups First, share with your partner one realization you had while learning HTML/CSS. It can be technical like \"don't forget that slash\" or conceptual \"I realized I need to read directions more closely.\" Second, visit each other's new website. Right click/Ctrl + Click to view page source. Proof your partner's code. Check their syntax. Work together to add the following to each of your websites: an iframe that embeds another website two div tags with different background colors (hint, you'll need to use a class or id) Be sure to upload your changes to your website. start Activity 1 together","title":"Tuesday, September 1, 2020"},{"location":"schedule/#thursday-september-3-2020","text":"Work through tutorials in Activity 2 by class time. Class agenda: icebreaker: Introduce Final Project Start Activity 3 together","title":"Thursday, September 3, 2020"},{"location":"schedule/#activity-log-week-2","text":"Due Monday 9/7 at 9am Complete Activity 3. In Canvas, submit a document with your answers. It is more important that you show your process, thinking, and attempts than it is that you get everything right. Blog post #2: Respond to the following prompt in a 300-500 word blog post on your Wordpress. In Canvas, submit the URL the blog post. Prompt: How was the command line? What was hard about it? How did it change your conception of your computer? Where do you see the value in using it? Reflect on your feelings while learning this concept. When did you get frustrated? How did you overcome your frustration (or not)? How was your experience with the tutorials? Be specific about things like tone, length, images, tasks, etc.","title":"Activity log week 2"},{"location":"schedule/#week-3-data","text":"","title":"Week 3 - Data"},{"location":"schedule/#tuesday-september-8-2020","text":"","title":"Tuesday, September 8, 2020"},{"location":"schedule/#thursday-september-10-2020","text":"","title":"Thursday, September 10, 2020"},{"location":"schedule/#week-4-visualization","text":"","title":"Week 4 - Visualization"},{"location":"schedule/#tuesday-september-15-2020","text":"","title":"Tuesday, September 15, 2020"},{"location":"schedule/#thursday-september-17-2020","text":"","title":"Thursday, September 17, 2020"},{"location":"schedule/#week-5-network-analysis","text":"","title":"Week 5 - Network Analysis"},{"location":"schedule/#tuesday-september-22-2020","text":"","title":"Tuesday, September 22, 2020"},{"location":"schedule/#thursday-september-24-2020","text":"","title":"Thursday, September 24, 2020"},{"location":"schedule/#week-6-spatial-analysis","text":"","title":"Week 6 - Spatial Analysis"},{"location":"schedule/#tuesday-september-29-2020","text":"","title":"Tuesday, September 29, 2020"},{"location":"schedule/#thursday-october-1-2020","text":"","title":"Thursday, October 1, 2020"},{"location":"schedule/#week-7-text-analysis","text":"","title":"Week 7 - Text Analysis"},{"location":"schedule/#tuesday-october-6-2020","text":"","title":"Tuesday, October 6, 2020"},{"location":"schedule/#thursday-october-8-2020","text":"","title":"Thursday, October 8, 2020"},{"location":"schedule/#week-8-project-planning","text":"","title":"Week 8 - Project Planning"},{"location":"schedule/#tuesday-october-13-2020","text":"","title":"Tuesday, October 13, 2020"},{"location":"schedule/#thursday-october-15-2020","text":"","title":"Thursday, October 15, 2020"},{"location":"schedule/#week-9-data-modeling","text":"","title":"Week 9 - Data Modeling"},{"location":"schedule/#tuesday-october-20-2020","text":"","title":"Tuesday, October 20, 2020"},{"location":"schedule/#thursday-october-22-2020","text":"","title":"Thursday, October 22, 2020"},{"location":"schedule/#week-10-data-analysis-visualization","text":"","title":"Week 10 - Data Analysis + Visualization"},{"location":"schedule/#tuesday-october-27-2020","text":"","title":"Tuesday, October 27, 2020"},{"location":"schedule/#thursday-october-29-2020","text":"","title":"Thursday, October 29, 2020"},{"location":"schedule/#week-11-results-interpretation","text":"","title":"Week 11 - Results + Interpretation"},{"location":"schedule/#tuesday-november-3-2020","text":"","title":"Tuesday, November 3, 2020"},{"location":"schedule/#thursday-november-5-2020","text":"","title":"Thursday, November 5, 2020"},{"location":"schedule/#week-12-wrapping-up-presentation","text":"","title":"Week 12 - Wrapping up + Presentation"},{"location":"schedule/#tuesday-november-10-2020","text":"","title":"Tuesday, November 10, 2020"},{"location":"schedule/#thursday-november-12-2020","text":"","title":"Thursday, November 12, 2020"},{"location":"spatial-analysis/","text":"","title":"Spatial Analysis"},{"location":"text-analysis/","text":"","title":"Text Analysis"},{"location":"visualization/","text":"Visualization #","title":"Visualization"},{"location":"visualization/#visualization","text":"","title":"Visualization"},{"location":"what-is-humanities-data/","text":"In this section, we'll lay the groundwork for what we mean when we talk about \"humanities data.\" What is data? What are the humanities? What is humanities data? Why humanities data? What about digital humanities (DH)? Readings What is data? # What do you see in you mind's eye when someone says \"data?\" Data is one of those ubiquitous words that we use and see everywhere, but when it comes time to define it, we hesitate. It is used by so many people in so many contexts, it can be difficult to narrow down. If asked to share the first thing that comes to mind, you might say \"information,\" \"numbers,\" or \"facts.\" Often, data is defined by the verbs associated with it, such as this definition from Wikpedia: \"Data is measured, collected and reported, and analyzed, whereupon it can be visualized using graphs, images or other analysis tools. Data as a general concept refers to the fact that some existing information or knowledge is represented or coded in some form suitable for better usage or processing.\" - Wikipedia Data is understood as something we do something with. It is an object in motion, under manipulation. It is used to say something, to prove something, or to disprove something else. Data is supposed to hold the truth. \"What does the data say?\" is a common refrain, as if data on its own can hold the answers. There is a lot more to say about the role and rhetoric of data in our society, but that does not bring us closer to a definition. If we're looking for a simple way to understand data, try this: \"Data is a value assigned to a thing.\" - School of Data . A value assigned to a thing. Value is a word we encounter a lot when working with technology and math. It is often a number, but it does not have to be. If you're filling out a form that asks for your name, email address, and phone number, the values are pieces of information that you contribute. The things are the categories, the labels that remain constant no matter how many people fill out the form. Data can be expressed in many different ways, something we'll talk about in another section. But for now, if you need a visualization, think of a simple table. Thing1 Thing2 Value 1 Value 2 What are the humanities? # The humanities might be a little easier to define than data. Wikipedia says that the humanities \"academic disciplines that study human culture.\" How does your own university define the humanities? At my school, the humanities course designation is defined this way: \"Courses in a variety of disciplines focus on aspects of human experience and on methods of addressing the basic questions of meaning in humanistic study. Courses in history, philosophy, religion, or other departments or interdepartmental programs may fulfill this requirement. W&L Registrar Now might be a good time to do some research about the history of universities and how we ended up with the academic disciplines we have. Take a look at the first few pages of Chapter 1 in Digital_Humanities . Did anything surprise you? What questions might you have about your own discipline, if you have one? But the registrar's definition offers something else: humanities courses focus on \"methods of addressing the basic questions of meaning in humanistic study.\" You might also see this phrased as \"humanistic inquiry.\" Does \"humanistic\" just mean that it is coming from a humanities discipline? Or is there more to it? If we were to borrow a computing term, using the term in its own definition is a bit recursive . Let's turn to some other potential definitions: \"The spectrum of humanistic thought, like that of scientific investigation, encompasses the gamut of beliefs regarding the nature of knowledge, the world, and the human ability to establish understanding with various degrees of certainty. D_H \"Humanistic inquiry acknowledges the situated, partial, and constitutive character of knowledge production, the recognition that knowledge is constructed, taken, not simply given as a natural representation of pre-existing fact.\" Joanna Drucker Both of these definitions give us an idea of what the humanities might be after: knowledge. The nature, meaning, and construction of knowledge. And right away, we should notice that knowledge is not a certain, natural thing. We might say that each of the humanities disciplines takes its own approach to finding meaning and constructing knowledge about the human experience. How does Philosophy do this? English? History? What is humanities data? # Miriam Poser, a name you'll see repeatedly in this coursebook, calls humanities data a \"necessary contradiction.\" She describes the humanities scholar's resistance to seeing their sources/material/texts as data. You might have a professor who thinks this way. Many humanities scholars engage with the objects of their study in a way that does require spreadsheets, databases, or powerful computers. They might read their print books, visit archives to read printed documents, or view artwork in person. That being said, many humanities scholars do, and have for a long time, used technology to help them in their work. Scholars were using computers in the 1950s to create concordances and indices . Today, scholars are reading e-books, annotating on their iPads, organizing and tagging digital images , or searching scholarly databases. In doing so, they're relying on tools and processes built by librarians, who have been organizing information for a long time. As technology expands into every corner of our lives, humanities scholars find themselves wanting and needing to address their questions, aka their lines of humanistic inquiry, in new ways. In some cases, humanities scholars have led the way in building new tools and methods for analyzing data. Examples. But what humanities scholars have found is that their \"data\" does not always make good data. We'll learn later on about tidy, well-structured data sets, but humanities sources do not fit the bill. Humanities-based research objects could be: a single book, a set of unique, hand-written manuscripts stored in four different libraries, the art on the walls of a whole city, ancient graffiti etched into crumbling plaster, or audiovisual material so fragile that it degrades with every viewing. Humanities scholars might have questions that start with, \"how many\" or \"what percentage,\" but they see years of work ahead in order to answer those questions. It's true that there are some humanities data projects that could go on for years and years. But before we get going, we have to figure out where we're going and how we're going to get there. This is a crucial piece called data modeling and it actually takes up a large portion of the work of a humanities data project. Before we start typing into our Google doc, we need to create a model of exactly what we're collecting, how it is going to be formatted, and the most difficult: what information we don't care about. For some, this is an excruciating process. Every detail is interesting, worth a whole day of rabbit trails and research. For others, it brings immense satisfaction to organize their material into neat rows and columns. Regardless it's necessary to bring your goals, data, and analysis methods in sync with one another. Fortunately, you don't have to do it alone. Humanities scholars have a reputation for working in isolation. Thinking, reading, and writing are solo activities. But data-driven humanities projects often require a team of people with a range of skillsets. Humanities scholars partner with librarians, technologists, amongst others in order to build giant databases or interactive applications. And importantly, they collaborate to extend and share their data. As just one example, the Pelagios Network lists dozens of partners in their expansive goal to \"link and explore the history of places.\" Why humanities data? # Why is this coursebook about data in the humanities and not just data in general? What about the social sciences? Or journalism? Aren't some of these methods used in the sciences as well? What if I'm not going to be a professor, why should I care? Good questions! First, there are a lot of existing resources for folks in other fields looking to learn about working with data. Examples. There are not as many resources available for folks, especially students, looking to learn about working with humanities data. This coursebook aims to fill this gap, and to do so from an multi-disciplinary perspective. But the better answer is that there are valuable lessons and transferable skills to be learned from working with humanities data. The skills, things like data modeling, cleaning, visualization, and analysis can be used in all sort of other ways. Data and databases are present in virtually every industry. Beyond technical skills, working with humanities data show you how to apply that humanistic inquiry to technology. It helps you see how the complexities of our world may have been sliced or squished to fit into a database. Understanding the principles of design will help recognize a misleading data visualization. What about digital humanities (DH)? # As you work through this coursebook, you will find references to \"Digital Humanities\" or DH. A lot of energy has been put into coming up with definitions for the Digital Humanities, but the short version is: it's the intersection of the humanities and technology. It's an umbrella term created to help humanists understand what their disciplines look like in a technological world. It's a community of practice that values process, openness, and experimentation. Humanities data projects certainly fall within Digital Humanities, but not every DH project is a humanities project. At its worst, it's a gatekeeping term, used to weaken the confidence of those who aren't sure their work is DH enough. Some people believe that in the future, DH will just be the humanities, but until then, we have this label to organize around. Readings #","title":"What is Humanities Data?"},{"location":"what-is-humanities-data/#what-is-data","text":"What do you see in you mind's eye when someone says \"data?\" Data is one of those ubiquitous words that we use and see everywhere, but when it comes time to define it, we hesitate. It is used by so many people in so many contexts, it can be difficult to narrow down. If asked to share the first thing that comes to mind, you might say \"information,\" \"numbers,\" or \"facts.\" Often, data is defined by the verbs associated with it, such as this definition from Wikpedia: \"Data is measured, collected and reported, and analyzed, whereupon it can be visualized using graphs, images or other analysis tools. Data as a general concept refers to the fact that some existing information or knowledge is represented or coded in some form suitable for better usage or processing.\" - Wikipedia Data is understood as something we do something with. It is an object in motion, under manipulation. It is used to say something, to prove something, or to disprove something else. Data is supposed to hold the truth. \"What does the data say?\" is a common refrain, as if data on its own can hold the answers. There is a lot more to say about the role and rhetoric of data in our society, but that does not bring us closer to a definition. If we're looking for a simple way to understand data, try this: \"Data is a value assigned to a thing.\" - School of Data . A value assigned to a thing. Value is a word we encounter a lot when working with technology and math. It is often a number, but it does not have to be. If you're filling out a form that asks for your name, email address, and phone number, the values are pieces of information that you contribute. The things are the categories, the labels that remain constant no matter how many people fill out the form. Data can be expressed in many different ways, something we'll talk about in another section. But for now, if you need a visualization, think of a simple table. Thing1 Thing2 Value 1 Value 2","title":"What is data?"},{"location":"what-is-humanities-data/#what-are-the-humanities","text":"The humanities might be a little easier to define than data. Wikipedia says that the humanities \"academic disciplines that study human culture.\" How does your own university define the humanities? At my school, the humanities course designation is defined this way: \"Courses in a variety of disciplines focus on aspects of human experience and on methods of addressing the basic questions of meaning in humanistic study. Courses in history, philosophy, religion, or other departments or interdepartmental programs may fulfill this requirement. W&L Registrar Now might be a good time to do some research about the history of universities and how we ended up with the academic disciplines we have. Take a look at the first few pages of Chapter 1 in Digital_Humanities . Did anything surprise you? What questions might you have about your own discipline, if you have one? But the registrar's definition offers something else: humanities courses focus on \"methods of addressing the basic questions of meaning in humanistic study.\" You might also see this phrased as \"humanistic inquiry.\" Does \"humanistic\" just mean that it is coming from a humanities discipline? Or is there more to it? If we were to borrow a computing term, using the term in its own definition is a bit recursive . Let's turn to some other potential definitions: \"The spectrum of humanistic thought, like that of scientific investigation, encompasses the gamut of beliefs regarding the nature of knowledge, the world, and the human ability to establish understanding with various degrees of certainty. D_H \"Humanistic inquiry acknowledges the situated, partial, and constitutive character of knowledge production, the recognition that knowledge is constructed, taken, not simply given as a natural representation of pre-existing fact.\" Joanna Drucker Both of these definitions give us an idea of what the humanities might be after: knowledge. The nature, meaning, and construction of knowledge. And right away, we should notice that knowledge is not a certain, natural thing. We might say that each of the humanities disciplines takes its own approach to finding meaning and constructing knowledge about the human experience. How does Philosophy do this? English? History?","title":"What are the humanities?"},{"location":"what-is-humanities-data/#what-is-humanities-data","text":"Miriam Poser, a name you'll see repeatedly in this coursebook, calls humanities data a \"necessary contradiction.\" She describes the humanities scholar's resistance to seeing their sources/material/texts as data. You might have a professor who thinks this way. Many humanities scholars engage with the objects of their study in a way that does require spreadsheets, databases, or powerful computers. They might read their print books, visit archives to read printed documents, or view artwork in person. That being said, many humanities scholars do, and have for a long time, used technology to help them in their work. Scholars were using computers in the 1950s to create concordances and indices . Today, scholars are reading e-books, annotating on their iPads, organizing and tagging digital images , or searching scholarly databases. In doing so, they're relying on tools and processes built by librarians, who have been organizing information for a long time. As technology expands into every corner of our lives, humanities scholars find themselves wanting and needing to address their questions, aka their lines of humanistic inquiry, in new ways. In some cases, humanities scholars have led the way in building new tools and methods for analyzing data. Examples. But what humanities scholars have found is that their \"data\" does not always make good data. We'll learn later on about tidy, well-structured data sets, but humanities sources do not fit the bill. Humanities-based research objects could be: a single book, a set of unique, hand-written manuscripts stored in four different libraries, the art on the walls of a whole city, ancient graffiti etched into crumbling plaster, or audiovisual material so fragile that it degrades with every viewing. Humanities scholars might have questions that start with, \"how many\" or \"what percentage,\" but they see years of work ahead in order to answer those questions. It's true that there are some humanities data projects that could go on for years and years. But before we get going, we have to figure out where we're going and how we're going to get there. This is a crucial piece called data modeling and it actually takes up a large portion of the work of a humanities data project. Before we start typing into our Google doc, we need to create a model of exactly what we're collecting, how it is going to be formatted, and the most difficult: what information we don't care about. For some, this is an excruciating process. Every detail is interesting, worth a whole day of rabbit trails and research. For others, it brings immense satisfaction to organize their material into neat rows and columns. Regardless it's necessary to bring your goals, data, and analysis methods in sync with one another. Fortunately, you don't have to do it alone. Humanities scholars have a reputation for working in isolation. Thinking, reading, and writing are solo activities. But data-driven humanities projects often require a team of people with a range of skillsets. Humanities scholars partner with librarians, technologists, amongst others in order to build giant databases or interactive applications. And importantly, they collaborate to extend and share their data. As just one example, the Pelagios Network lists dozens of partners in their expansive goal to \"link and explore the history of places.\"","title":"What is humanities data?"},{"location":"what-is-humanities-data/#why-humanities-data","text":"Why is this coursebook about data in the humanities and not just data in general? What about the social sciences? Or journalism? Aren't some of these methods used in the sciences as well? What if I'm not going to be a professor, why should I care? Good questions! First, there are a lot of existing resources for folks in other fields looking to learn about working with data. Examples. There are not as many resources available for folks, especially students, looking to learn about working with humanities data. This coursebook aims to fill this gap, and to do so from an multi-disciplinary perspective. But the better answer is that there are valuable lessons and transferable skills to be learned from working with humanities data. The skills, things like data modeling, cleaning, visualization, and analysis can be used in all sort of other ways. Data and databases are present in virtually every industry. Beyond technical skills, working with humanities data show you how to apply that humanistic inquiry to technology. It helps you see how the complexities of our world may have been sliced or squished to fit into a database. Understanding the principles of design will help recognize a misleading data visualization.","title":"Why humanities data?"},{"location":"what-is-humanities-data/#what-about-digital-humanities-dh","text":"As you work through this coursebook, you will find references to \"Digital Humanities\" or DH. A lot of energy has been put into coming up with definitions for the Digital Humanities, but the short version is: it's the intersection of the humanities and technology. It's an umbrella term created to help humanists understand what their disciplines look like in a technological world. It's a community of practice that values process, openness, and experimentation. Humanities data projects certainly fall within Digital Humanities, but not every DH project is a humanities project. At its worst, it's a gatekeeping term, used to weaken the confidence of those who aren't sure their work is DH enough. Some people believe that in the future, DH will just be the humanities, but until then, we have this label to organize around.","title":"What about digital humanities (DH)?"},{"location":"what-is-humanities-data/#readings","text":"","title":"Readings"},{"location":"your-computer/","text":"In this section, we'll learn a little bit about how our computer works using a tool called the command line. Do you really know your computer? Command Line How it works Syntax File Structures Activities Activity 1 Activity 2 Activity 3 Resources https://xkcd.com/934/ Do you really know your computer? # For many of us, computers are a means to an end, a tool for a job. We use our computers to write papers, send email, talk to our friends and family, watch Netflix, or maybe play a game. Maybe you use your computer to make art, do science, or analyze statistics. Most likely, you have a preference for a PC or a Mac, even if the only reason you can articulate is the way it looks. But how well do you really know your computer? Do you know what operating system it runs? Which version of that operating system? When was the last time you updated it? Have you ever upgraded your hardware? Do you even know which pieces of your computer are the hardware? As an exercise, see if you can find the name and version of your operating system. What other information can you find out? For a device as ubiquitous as the computer, most of us don't know a lot about how they work. On the one hand, that's great! Why should you have to learn the intricacies of bits, bytes, circuits, and microprocessors to do something basic like write an email? On the other hand, what if you want to use the power of your computer to count words, make a map, or analyze a network? When it comes to working with data, having a deeper understanding of what your computer can do can be to your advantage. Not everything can be done in the browser. After all, computers started their life as counting machines. If you want to work with large sets of data in an efficient manner, ask a computer to do what it is best at: count things, find patterns, or carry out a series of operations. That is not to say computers can do all the work! Humans have their own part to play. Someone has to give the instructions, write the programs, make connections, or see the larger context of the computer's work. In this section, we'll learn about one specific way to give instructions to your computer: the command line. Command Line # Most of us interact with our computers or phones through highly visual interfaces. We know what button to press because of the stylized image representing it. We understand what it means when a website has a blue \"f\" or when a friend sends a thumbs-up emoji. Your computer, regardless of operating system, wants to interact with you via visual cues. We call these Graphical User Interfaces aka GUI (pronounced gooey). But there's another way. You can interact with your computer entirely via text commands through something called a Command Line Interface or CLI. When you see a hacker typing green text into a black box in a movie, they're using the command line. But the command line isn't just for hacking. Not only can you perform a number of different actions on your computer, many pieces of software can only be used through the command line. You can use the command line to create, move, or copy files. You can convert images or find and replace. You can run complex programming languages, or just write a simple script to automate a repetitive task. There are many tools for working with data that require you to use the command line. Just like HTML and CSS, you do not have to memorize every command. There are plenty of sites to remind you of the commands or that provide existing scripts to help with a task. How it works # For Mac users: Search and open ( Command + Space ) for an app called Terminal. A white box should appear. You should see some information about you computer, then your name, then a dollar sign. It could look like this 38371-Lib-Brooks:~ mackenzie$ . Typing in this program is a little different than typing in a document. You cannot use your mouse to click into text and change what is written. Pretend you're working at an old school computer where there is no mouse. If you want to change what you've written, use the arrow keys or backspace to navigate. Type in the letters pwd . No spaces, no capitalization. Hit enter. This command stands for \"print working directory\" and tell us where we are in the file structure. Confused yet? Scroll down to the next section for more context. For Windows users: * Search/open a program called cmd.exe or Powershell. If you're using a Chromebook, or another device, you may not be able to participate in the command line activities, since the nature of your device limits access to your computer. Syntax # Just as we learned the unique syntaxes for HTML and CSS, issuing commands in the command line requires a new syntax. Here's the basic format: $ command parameters -flag The $ is not something you type. It appears at the command prompt as a way to indicate that you should begin typing. Most tutorials you see will start their commands with the $ to show that this is the beginning of a command. Think of it like a period at the end of a sentence. It is there to visually prompt you. The next part of the syntax is the command. Usually this is a single word or series of letters, like pwd ls or cd . Go ahead and type one of these commands into the command prompt, then press enter. Next, we have parameters, or some kind of direction for our command. The command cd stands for \"change directory.\" Often, we need to tell the command prompt where we want to change into, so we need to give it a parameter. The command cd Desktop would change our directory (more about directories in a moment) to the Desktop. So in this case, Desktop = parameter. Finally, we have a flag, usually expressed as a dash + letter -f . Flags are options that you might turn on to change the nature of your command. Enter ls -l into the command prompt and press enter. ls stands for list directory contents, and in this case, the -l flag means list the contents in the long version. Now try just ls without the flag. Notice the difference? File Structures # Before we go any further, there is a key concept you must understand about how your computer stores information. All of the stuff on your computer, the documents, music, PDFs, videos, is organized into folders (also known as directories). Modern operating systems, especially on a Mac, as well as cloud-based storage like Google Drive or Box, obscure this fact. But it's essential to understanding the command line, working with data, and publishing content to the web. When you are issuing a command, or referencing a file, in any type of coding context, that action is being done with an awareness of the file structure, even if you personally don't realize it. For example, when you wanted to insert a photo of a cute kitten into your webpage, the only way to make it work was if the image of the kitten was in the same folder as your HTML document. When you wrote <img src=\"kittens.jpg\"> you were giving the browser both the name of that file, as well as the path. If both the image and the HTML document were in the same folder, then the path was unnecessary. But say you created a folder for all your images, called \"images,\" within the same folder as your HTML document. Now, your HTML might need to look like this <img src=\"/images/kittens.jgp\"> . As humans, we rely on search functions frequently to deliver the files we're looking for. But code, as expressed through commands or HTML, doesn't have a built-in search function. And even if it did, it still might not know exactly which file you meant. You have to help the computer find its way to the file you are referring to. If you recall from the previous section, websites are just made up of files and folders too. When you upload something to Web, it is being added to a folder on someone else's server. Have you ever looked at a URL up close? Some browsers, like Safari, will try to hide it from you. But if look closely, you should see the directory structure at work. In this URL, \"faculty-and-staff\" is a subdirectory of \"english-department\" https://my.wlu.edu/english-department/faculty-and-staff . If you're looking real close, you might also notice that there are dashes in the folder/directory names. This is another important lesson! Browsers and computers have a hard time with spaces. It doesn't necessary behave the same way a character like a letter or a number does. Browsers will often replace a space with the characters %20 . It's best practice to avoid using spaces in your file names. I know your computer lets you name things with spaces, but it will save you a lot of headaches if you avoid them. Use dashes, underscores, or something called camelCase where the second word is capitalized to set it apart. Activities # There are a lot of existing tutorials for learning the command line, so we're not going to try to recreate that here. Activity 1 # Work through The Command Line Crash Course . This tutorial accommodates both Windows and Mac people. This tutorial is about brute force repetition, so just lean into that method of learning for right now. Activity 2 # The Programming Historian is a wonderful website offering tutorials (in multiple languages!) on digital research methods in the humanities. They have two tutorials on the command line that are slightly more advanced than Activity 1. Work through the relevant tutorial for your operating system. Mac users: Intro to the Bash Command Line](http://programminghistorian.org/lessons/intro-to-bash) Windows users: Intro to Powershell (This one gets pretty advanced, don't worry if you can't get all the way through.) Activity 3 # In this activity, we'll apply our new command line skills to working with a corpus of textual data. While we're not quite ready to learn about text analysis, when we get there, we will need to have our data ready. You might notice I just threw some new words at you - \"corpus\" and \"textual.\" Don't freak out, these are just specific words to refer a collection (corpus) of textual (not numbers) data. Instead of a spreadsheet with rows and columns, we'll be working with individual documents groups together into folders. I am purposely giving you a kind of messy, but very much real, dataset to explore. It's okay if you get confused, but try to use these new commands Download this zip file and save it to your Desktop. Unzip the file by double clicking or using an Extract All option. A zip file is a compression method for bundling up a lot of folders into one so it's easy to share. Open the command line shell, and navigate to the folder you just downloaded. Use pwd cd and ls to navigate through the TesseractOCR folder. Can you mirror these action using your mouse and the Finder/Windows Explorer window? What are the differences? In a new document, answer the following questions: What is the basic file structure of the data set as you have received it? What about the file names? * What are the patterns? Where (or when) do the patterns change? What is the granularity (of the text files? Does each file contain one page? Issue? Reel? Volume? Year? Use cat to read a file. Find the manual for cat. What else can you do with this command? What happens when you type ls *.2.txt ? Can you figure out how to list all the file names in TesseractOCR and send them to a text file? Last step: type history and paste your command history into the text file. Resources # Sourcecaster by Thomas Padilla and James Baker. This site has example scripts for performing common tasks with files. ExplainShell . Paste in a command and receive a definition.","title":"Your Computer"},{"location":"your-computer/#do-you-really-know-your-computer","text":"For many of us, computers are a means to an end, a tool for a job. We use our computers to write papers, send email, talk to our friends and family, watch Netflix, or maybe play a game. Maybe you use your computer to make art, do science, or analyze statistics. Most likely, you have a preference for a PC or a Mac, even if the only reason you can articulate is the way it looks. But how well do you really know your computer? Do you know what operating system it runs? Which version of that operating system? When was the last time you updated it? Have you ever upgraded your hardware? Do you even know which pieces of your computer are the hardware? As an exercise, see if you can find the name and version of your operating system. What other information can you find out? For a device as ubiquitous as the computer, most of us don't know a lot about how they work. On the one hand, that's great! Why should you have to learn the intricacies of bits, bytes, circuits, and microprocessors to do something basic like write an email? On the other hand, what if you want to use the power of your computer to count words, make a map, or analyze a network? When it comes to working with data, having a deeper understanding of what your computer can do can be to your advantage. Not everything can be done in the browser. After all, computers started their life as counting machines. If you want to work with large sets of data in an efficient manner, ask a computer to do what it is best at: count things, find patterns, or carry out a series of operations. That is not to say computers can do all the work! Humans have their own part to play. Someone has to give the instructions, write the programs, make connections, or see the larger context of the computer's work. In this section, we'll learn about one specific way to give instructions to your computer: the command line.","title":"Do you really know your computer?"},{"location":"your-computer/#command-line","text":"Most of us interact with our computers or phones through highly visual interfaces. We know what button to press because of the stylized image representing it. We understand what it means when a website has a blue \"f\" or when a friend sends a thumbs-up emoji. Your computer, regardless of operating system, wants to interact with you via visual cues. We call these Graphical User Interfaces aka GUI (pronounced gooey). But there's another way. You can interact with your computer entirely via text commands through something called a Command Line Interface or CLI. When you see a hacker typing green text into a black box in a movie, they're using the command line. But the command line isn't just for hacking. Not only can you perform a number of different actions on your computer, many pieces of software can only be used through the command line. You can use the command line to create, move, or copy files. You can convert images or find and replace. You can run complex programming languages, or just write a simple script to automate a repetitive task. There are many tools for working with data that require you to use the command line. Just like HTML and CSS, you do not have to memorize every command. There are plenty of sites to remind you of the commands or that provide existing scripts to help with a task.","title":"Command Line"},{"location":"your-computer/#how-it-works","text":"For Mac users: Search and open ( Command + Space ) for an app called Terminal. A white box should appear. You should see some information about you computer, then your name, then a dollar sign. It could look like this 38371-Lib-Brooks:~ mackenzie$ . Typing in this program is a little different than typing in a document. You cannot use your mouse to click into text and change what is written. Pretend you're working at an old school computer where there is no mouse. If you want to change what you've written, use the arrow keys or backspace to navigate. Type in the letters pwd . No spaces, no capitalization. Hit enter. This command stands for \"print working directory\" and tell us where we are in the file structure. Confused yet? Scroll down to the next section for more context. For Windows users: * Search/open a program called cmd.exe or Powershell. If you're using a Chromebook, or another device, you may not be able to participate in the command line activities, since the nature of your device limits access to your computer.","title":"How it works"},{"location":"your-computer/#syntax","text":"Just as we learned the unique syntaxes for HTML and CSS, issuing commands in the command line requires a new syntax. Here's the basic format: $ command parameters -flag The $ is not something you type. It appears at the command prompt as a way to indicate that you should begin typing. Most tutorials you see will start their commands with the $ to show that this is the beginning of a command. Think of it like a period at the end of a sentence. It is there to visually prompt you. The next part of the syntax is the command. Usually this is a single word or series of letters, like pwd ls or cd . Go ahead and type one of these commands into the command prompt, then press enter. Next, we have parameters, or some kind of direction for our command. The command cd stands for \"change directory.\" Often, we need to tell the command prompt where we want to change into, so we need to give it a parameter. The command cd Desktop would change our directory (more about directories in a moment) to the Desktop. So in this case, Desktop = parameter. Finally, we have a flag, usually expressed as a dash + letter -f . Flags are options that you might turn on to change the nature of your command. Enter ls -l into the command prompt and press enter. ls stands for list directory contents, and in this case, the -l flag means list the contents in the long version. Now try just ls without the flag. Notice the difference?","title":"Syntax"},{"location":"your-computer/#file-structures","text":"Before we go any further, there is a key concept you must understand about how your computer stores information. All of the stuff on your computer, the documents, music, PDFs, videos, is organized into folders (also known as directories). Modern operating systems, especially on a Mac, as well as cloud-based storage like Google Drive or Box, obscure this fact. But it's essential to understanding the command line, working with data, and publishing content to the web. When you are issuing a command, or referencing a file, in any type of coding context, that action is being done with an awareness of the file structure, even if you personally don't realize it. For example, when you wanted to insert a photo of a cute kitten into your webpage, the only way to make it work was if the image of the kitten was in the same folder as your HTML document. When you wrote <img src=\"kittens.jpg\"> you were giving the browser both the name of that file, as well as the path. If both the image and the HTML document were in the same folder, then the path was unnecessary. But say you created a folder for all your images, called \"images,\" within the same folder as your HTML document. Now, your HTML might need to look like this <img src=\"/images/kittens.jgp\"> . As humans, we rely on search functions frequently to deliver the files we're looking for. But code, as expressed through commands or HTML, doesn't have a built-in search function. And even if it did, it still might not know exactly which file you meant. You have to help the computer find its way to the file you are referring to. If you recall from the previous section, websites are just made up of files and folders too. When you upload something to Web, it is being added to a folder on someone else's server. Have you ever looked at a URL up close? Some browsers, like Safari, will try to hide it from you. But if look closely, you should see the directory structure at work. In this URL, \"faculty-and-staff\" is a subdirectory of \"english-department\" https://my.wlu.edu/english-department/faculty-and-staff . If you're looking real close, you might also notice that there are dashes in the folder/directory names. This is another important lesson! Browsers and computers have a hard time with spaces. It doesn't necessary behave the same way a character like a letter or a number does. Browsers will often replace a space with the characters %20 . It's best practice to avoid using spaces in your file names. I know your computer lets you name things with spaces, but it will save you a lot of headaches if you avoid them. Use dashes, underscores, or something called camelCase where the second word is capitalized to set it apart.","title":"File Structures"},{"location":"your-computer/#activities","text":"There are a lot of existing tutorials for learning the command line, so we're not going to try to recreate that here.","title":"Activities"},{"location":"your-computer/#activity-1","text":"Work through The Command Line Crash Course . This tutorial accommodates both Windows and Mac people. This tutorial is about brute force repetition, so just lean into that method of learning for right now.","title":"Activity 1"},{"location":"your-computer/#activity-2","text":"The Programming Historian is a wonderful website offering tutorials (in multiple languages!) on digital research methods in the humanities. They have two tutorials on the command line that are slightly more advanced than Activity 1. Work through the relevant tutorial for your operating system. Mac users: Intro to the Bash Command Line](http://programminghistorian.org/lessons/intro-to-bash) Windows users: Intro to Powershell (This one gets pretty advanced, don't worry if you can't get all the way through.)","title":"Activity 2"},{"location":"your-computer/#activity-3","text":"In this activity, we'll apply our new command line skills to working with a corpus of textual data. While we're not quite ready to learn about text analysis, when we get there, we will need to have our data ready. You might notice I just threw some new words at you - \"corpus\" and \"textual.\" Don't freak out, these are just specific words to refer a collection (corpus) of textual (not numbers) data. Instead of a spreadsheet with rows and columns, we'll be working with individual documents groups together into folders. I am purposely giving you a kind of messy, but very much real, dataset to explore. It's okay if you get confused, but try to use these new commands Download this zip file and save it to your Desktop. Unzip the file by double clicking or using an Extract All option. A zip file is a compression method for bundling up a lot of folders into one so it's easy to share. Open the command line shell, and navigate to the folder you just downloaded. Use pwd cd and ls to navigate through the TesseractOCR folder. Can you mirror these action using your mouse and the Finder/Windows Explorer window? What are the differences? In a new document, answer the following questions: What is the basic file structure of the data set as you have received it? What about the file names? * What are the patterns? Where (or when) do the patterns change? What is the granularity (of the text files? Does each file contain one page? Issue? Reel? Volume? Year? Use cat to read a file. Find the manual for cat. What else can you do with this command? What happens when you type ls *.2.txt ? Can you figure out how to list all the file names in TesseractOCR and send them to a text file? Last step: type history and paste your command history into the text file.","title":"Activity 3"},{"location":"your-computer/#resources","text":"Sourcecaster by Thomas Padilla and James Baker. This site has example scripts for performing common tasks with files. ExplainShell . Paste in a command and receive a definition.","title":"Resources"}]}